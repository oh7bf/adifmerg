=head1 NAME

qsorep -  QSO repository with ADIF-files

=head1 SYNOPSIS

B<qsorep> B<-l> repdir [B<-c> command] [B<-h>] [B<-v>] [B<-V>]

=head1 DESCRIPTION

The B<qsorep> can be used to add or edit QSOs in an ADIF-file repository. 
The repository directory needs to be given with the option B<-l>. If the 
directory does not exist, a new repository is created. The repository has
subdirectories for the ADIF logs and produced QSL cards. There are
separate directories for the exported Cabrillo logs, csv-files, eQSL logs
and LoTW logs. The filter subdirectory has all the filters to manipulate
the log files. For example to I<txt2adif> has a single line

| adifmerg -f -txt -o

meaning that text is read from the standard input and ADIF-data is written
to standard output. It is necessary to create own custom filters to the
filter directory.

The configuration files for each ADIF-log is hidden into directory
.qsorep/ .

Production of QSL labels or QSL cards is possible. 

Use for example B<git> to track changes in the log files.

=head1 OPTIONS

B<-l> directory for repository

B<-c> execute command string

B<-h> display a short help text

B<-v> verbose

B<-V> print version

=head1 COMMANDS

Add new QSOs to an ADIF-log file from terminal.

I<file> B<add>

Create QSL-cards. 

I<file> B<cards>

The filter to produce the LaTeX file is defined by the variable
CARDFILTER in the log configuration file. In addition to the template file
usually in cards/ directory also the files 'qslhead.tex' and 'qslfoot.tex'
need to be in cards/ directory to produce the LaTeX file.

Check ADIF-file.

I<file> B<check> [dxcc] [errors]

The file is sent to B<adifmerg> to see any errors. The lines
with errors can be optionally printed. With option I<dxcc> the DXCC entity
is checked for the call sign. 

Create a new log file. The file type 'eqsl', 'log' or 'lotw' determines how
new QSOs and QSLs are added to the log. Optionally the file can created
from file2.

I<file> B<create> eqsl|log|lotw [path/file2] [filter [parameters]]

A I<filter> can be used to modify the ADIF-file and I<parameters> can be passed 
to the adifmerg(1).

Check duplicate QSOs.

I<file> B<duplicate> [minutes]

Edit ADIF-log or its configuration file. With the I<diff> option the diff(1) 
is used to show the difference to the original file.

I<file> B<edit> [config|diff]

Export ADIF-log as Cabrillo, csv, eQSL, LoTW, template filled or text file.
The 'file2' is given as a template for the 'cab' or 'temp' options.

I<file> B<export> cab|csv|eqsl|lotw|temp|txt [file2]

Print short or verbosed info on the logfile.

I<file> B<info> [verbosed]

Print help on command.

[B<command>] B<help>

Print history of commands.

[number] B<history>

List logfiles or print log on the screen. The QSOs can be selected with for 
example 'CALL=DX0ABC'.

I<file> B<list> [verbosed] [selection]

Merge file2 to file.

I<file> B<merge> file2 [diff|test]

Add QSLs to file.

I<file> B<qsl> [diff]

Add QSOs to file.

I<file> B<qso> [diff]

Query log file for data.

I<file> B<query> parameter

The possible parameters are bands, cont, country, cqz, dxcc, firstqso, grids,
grid6, grid8, iota, ituz, lastqsl, lasteqsl, lastlqsl, lastqso, llastqsl,
llastqso, llastqsot, lonlat, lonlatd, modes, ncont, ncq, ndxcc, neqslr,
neqsls, nerr, ngrid, nitu, nlonlat, npota, nlqslr, nlqsls, nqslr, nqsls, nqso,
nsota, nstation, nwwff, pota, props, sota, stations or wwff.

Sort logfile to ascending time order.

I<file> B<sort>

Split logfile into smaller logs with a set, e.g. 'bands'.

I<file> B<split> set

The possible sets are: bands, cont, country, cqz, dxcc, grids, grid6, grid8,
grid10, iota, ituz, modes, props, sota and stations.

Print qsorep(1) version.

B<version>

=head1 REPOSITORY DIRECTORIES

Typical QSO repository has following directories

I<adif> All the ADIF-log files are in this directory.  

I<cabrillo> Produced Cabrillo files. 

I<cards> Produced QSL-card files. 

I<csv> Produced CSV files.

I<eqsl> Produced eQSL ADIF-files. 

I<filter> Filters to modify and export ADIF-files.  

I<lotw> Produced ADIF-files for signing and uploading to LoTW. 

I<txt> Produced text files.

In addition there is a hidden I<.qsorep> directory. This directory has
a configuration file for all the ADIF-log files in I<adif> directory.

Any external temporary data can live outside of the repository 
for example in /tmp. 

=head1 EXAMPLE

Create initial local copy of LoTW QSOs

I<lotwin> B<create> I<lotw>

Print info on the I<lotwin.adi> file

I<lotwin> B<info> I<verbosed>

Update received QSLs from LoTW 

I<lotwin> B<qsl> I<diff>

Split log file into different log files for each station call sign

I<lotwin> B<split> I<stations>

Extrac all QSOs to NO0CALL

I<NO0CALL> B<create> I<log> Qsorep/adif/lotwin.adi dummy -S CALL=NO0CALL

Create new log for downloaded SOTA QSOs, use filter sotaMY0CALL and select 
QSOs on date 20130331

I<20130331SOTAREF> B<create> I<log> /home/my0call/Downloads/mylog.csv sotaMY0CALL -S QSO_DATE=20130331

Typical filter file sotaMY0CALL could contain a line like

| adifmerg -f - -o -R MY_SOTA=SOTA -A MY_COUNTRY=Finland,MY_ITU_ZONE=18,MY_CQ_ZONE=15

Export the file for signing and uploading to LoTW

I<20130331SOTAREF> B<export> I<lotw>

Update QSOs

I<20130331SOTAREF> B<merge> newlog I<diff>

Edit main log file I<my0call>

I<my0call> B<edit> I<diff>

Note that some information can be lost in editing.

Add a QSO to the log file

I<my0call> B<add>

Add QSOs from received paper QSL cards by call signs and merge with the main
log file

I<my0callqslr> B<create> I<log> Qsorep/adif/my0call.adi 

I<my0callqslr> B<qsl> I<diff>

I<my0call> B<merge> I<my0callqslr>

=head1 DIAGNOSTICS

The I<qsorep> has been tested with perl v5.10.1. You may need to adapt 
the script to your environment. 

=head1 BUGS


=head1 AUTHORS

Jaakko Koivuniemi OH7BF, if tod lars ta fb7ho

=head1 LINKS

=head1 SEE ALSO

Getopt::Std(3pm), Term::ReadLine(3pm), adifmerg(1)
