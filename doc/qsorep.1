.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "QSOREP 1"
.TH QSOREP 1 "2025-01-11" "version 20250111" "Hamradio"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
qsorep \-  QSO repository with ADIF\-files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBqsorep\fR \fB\-l\fR repdir [\fB\-c\fR command] [\fB\-h\fR] [\fB\-v\fR] [\fB\-V\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBqsorep\fR can be used to add or edit QSOs in an ADIF-file repository. 
The repository directory needs to be given with the option \fB\-l\fR. If the 
directory does not exist, a new repository is created. The repository has
subdirectories for the \s-1ADIF\s0 logs and produced \s-1QSL\s0 cards. There are
separate directories for the exported Cabrillo logs, csv-files, eQSL logs
and LoTW logs. The filter subdirectory has all the filters to manipulate
the log files. For example, \fItxt2adif\fR has a single line
.PP
| adifmerg \-f \-txt \-o
.PP
meaning that text is read from the standard input and ADIF-data is written
to standard output. It is necessary to create own custom filters to the
filter directory.
.PP
The configuration files for each ADIF-log is hidden into directory
\&.qsorep/ .
.PP
Production of \s-1QSL\s0 labels or \s-1QSL\s0 cards is possible.
.PP
Use for example \fBgit\fR to track changes in the log files.
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\-l\fR directory for repository
.PP
\&\fB\-c\fR execute command string
.PP
\&\fB\-h\fR display a short help text
.PP
\&\fB\-v\fR verbose
.PP
\&\fB\-V\fR print version
.SH "COMMANDS"
.IX Header "COMMANDS"
Add new QSOs to an ADIF-log file from terminal.
.PP
\&\fIfile\fR \fBadd\fR
.PP
Create QSL-cards.
.PP
\&\fIfile\fR \fBcards\fR
.PP
The filter to produce the LaTeX file is defined by the variable
\&\s-1CARDFILTER\s0 in the log configuration file. In addition to the template file
usually in cards/ directory also the files 'qslhead.tex' and 'qslfoot.tex'
need to be in cards/ directory to produce the LaTeX file.
.PP
Check ADIF-file.
.PP
\&\fIfile\fR \fBcheck\fR [dxcc] [errors]
.PP
The file is sent to \fBadifmerg\fR to see any errors. The lines
with errors can be optionally printed. With option \fIdxcc\fR the \s-1DXCC\s0 entity
is checked for the call sign.
.PP
Create a new log file. The file type 'eqsl', 'log' or 'lotw' determines how
new QSOs and QSLs are added to the log. Optionally the file can created
from file2.
.PP
\&\fIfile\fR \fBcreate\fR eqsl|log|lotw [path/file2] [filter [parameters]]
.PP
A \fIfilter\fR can be used to modify the ADIF-file and \fIparameters\fR can be passed 
to the \fIadifmerg\fR\|(1).
.PP
Check duplicate QSOs.
.PP
\&\fIfile\fR \fBduplicate\fR [minutes]
.PP
Edit ADIF-log or its configuration file. With the \fIdiff\fR option the \fIdiff\fR\|(1) 
is used to show the difference to the original file.
.PP
\&\fIfile\fR \fBedit\fR [config|diff]
.PP
Export ADIF-log as Cabrillo, csv, eQSL, LoTW, template filled or text file.
The 'file2' is given as a template for the 'cab' or 'temp' options.
.PP
\&\fIfile\fR \fBexport\fR cab|csv|eqsl|lotw|temp|txt [file2]
.PP
Print short or verbosed info on the logfile.
.PP
\&\fIfile\fR \fBinfo\fR [verbosed]
.PP
Print help on command.
.PP
[\fBcommand\fR] \fBhelp\fR
.PP
Print history of commands.
.PP
[number] \fBhistory\fR
.PP
List logfiles or print log on the screen. The QSOs can be selected with for 
example 'CALL=DX0ABC'.
.PP
\&\fIfile\fR \fBlist\fR [verbosed] [selection]
.PP
Merge file2 to file.
.PP
\&\fIfile\fR \fBmerge\fR file2 [diff|test]
.PP
Add QSLs to file.
.PP
\&\fIfile\fR \fBqsl\fR [diff]
.PP
Add QSOs to file.
.PP
\&\fIfile\fR \fBqso\fR [diff]
.PP
Query log file for data.
.PP
\&\fIfile\fR \fBquery\fR parameter
.PP
The possible parameters are bands, cont, country, cqz, dxcc, firstqso, grids,
grid6, grid8, iota, ituz, lastqsl, lasteqsl, lastlqsl, lastqso, llastqsl,
llastqso, llastqsot, lonlat, lonlatd, modes, ncont, ncq, ndxcc, neqslr,
neqsls, nerr, ngrid, nitu, nlonlat, npota, nlqslr, nlqsls, nqslr, nqsls, nqso,
nsota, nstation, nwwff, pota, props, sota, stations or wwff.
.PP
Sort logfile to ascending time order.
.PP
\&\fIfile\fR \fBsort\fR
.PP
Split logfile into smaller logs with a set, e.g. 'bands'.
.PP
\&\fIfile\fR \fBsplit\fR set
.PP
The possible sets are: bands, cont, country, cqz, dxcc, grids, grid6, grid8,
grid10, iota, ituz, modes, props, sota and stations.
.PP
Print \fIqsorep\fR\|(1) version.
.PP
\&\fBversion\fR
.SH "REPOSITORY DIRECTORIES"
.IX Header "REPOSITORY DIRECTORIES"
Typical \s-1QSO\s0 repository has following directories
.PP
\&\fIadif\fR All the ADIF-log files are in this directory.
.PP
\&\fIcabrillo\fR Produced Cabrillo files.
.PP
\&\fIcards\fR Produced QSL-card files.
.PP
\&\fIcsv\fR Produced \s-1CSV\s0 files.
.PP
\&\fIeqsl\fR Produced eQSL ADIF-files.
.PP
\&\fIfilter\fR Filters to modify and export ADIF-files.
.PP
\&\fIlotw\fR Produced ADIF-files for signing and uploading to LoTW.
.PP
\&\fItxt\fR Produced text files.
.PP
In addition there is a hidden \fI.qsorep\fR directory. This directory has
a configuration file for all the ADIF-log files in \fIadif\fR directory.
.PP
Any external temporary data can live outside of the repository 
for example in /tmp.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Create initial local copy of LoTW QSOs
.PP
\&\fIlotwin\fR \fBcreate\fR \fIlotw\fR
.PP
Print info on the \fIlotwin.adi\fR file
.PP
\&\fIlotwin\fR \fBinfo\fR \fIverbosed\fR
.PP
Update received QSLs from LoTW
.PP
\&\fIlotwin\fR \fBqsl\fR \fIdiff\fR
.PP
Split log file into different log files for each station call sign
.PP
\&\fIlotwin\fR \fBsplit\fR \fIstations\fR
.PP
Extract all QSOs to \s-1NO0CALL\s0
.PP
\&\fI\s-1NO0CALL\s0\fR \fBcreate\fR \fIlog\fR Qsorep/adif/lotwin.adi dummy \-S CALL=NO0CALL
.PP
Create new log for downloaded \s-1SOTA\s0 QSOs, use filter sotaMY0CALL and select 
QSOs on date 20130331
.PP
\&\fI20130331SOTAREF\fR \fBcreate\fR \fIlog\fR /home/my0call/Downloads/mylog.csv sotaMY0CALL \-S QSO_DATE=20130331
.PP
Typical filter file sotaMY0CALL could contain a line like
.PP
| adifmerg \-f \- \-o \-A MY_COUNTRY=Finland,MY_ITU_ZONE=18,MY_CQ_ZONE=15
.PP
Export the file for signing and uploading to LoTW
.PP
\&\fI20130331SOTAREF\fR \fBexport\fR \fIlotw\fR
.PP
Update QSOs
.PP
\&\fI20130331SOTAREF\fR \fBmerge\fR newlog \fIdiff\fR
.PP
Edit main log file \fImy0call\fR
.PP
\&\fImy0call\fR \fBedit\fR \fIdiff\fR
.PP
Note that some information can be lost in editing.
.PP
Add a \s-1QSO\s0 to the log file
.PP
\&\fImy0call\fR \fBadd\fR
.PP
Add QSOs from received paper \s-1QSL\s0 cards by call signs and merge with the main
log file
.PP
\&\fImy0callqslr\fR \fBcreate\fR \fIlog\fR Qsorep/adif/my0call.adi
.PP
\&\fImy0callqslr\fR \fBqsl\fR \fIdiff\fR
.PP
\&\fImy0call\fR \fBmerge\fR \fImy0callqslr\fR
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
The \fIqsorep\fR has been tested with perl v5.10.1. You may need to adapt 
the script to your environment.
.SH "BUGS"
.IX Header "BUGS"
.SH "AUTHORS"
.IX Header "AUTHORS"
Jaakko Koivuniemi \s-1OH7BF\s0
.SH "LINKS"
.IX Header "LINKS"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIGetopt::Std\fR\|(3pm), \fITerm::ReadLine\fR\|(3pm), \fIadifmerg\fR\|(1)
